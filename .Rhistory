library(faraway)
data("teengamb")
teengamb
summary(teengamb)
View(teengamb)
teengamb
view(summary(teengamb))
summary(teengamb)
print(summary(teengamb))
plot(sex~status,teengamb)
plot(sex,income,teengamb)
plot(status,income)
plot(income~verbal,teengamb)
plot(teengamb)
teengamb
teengamb
data(teengamb)
library(faraway)
data(teengamb)
data(teengamb)
teengamb
plot(teengamb.income,teengamb.gamble)
plot
help("plot")
a<-c(1,2,3)
b<- c(0,1,0)
a+b
a-b
a*b
plot(a,b)
plot(b,a)
plot(a,a)
plot(a,b)
boxplot(a,b)
load("C:/Users/Simon/Desktop/twoinlayer2.csv")
nettest <- read.csv(file="C:/Users/Simon/Desktop/twoinlayer2.csv",head = TRUE, sep=",")
nettest
summary(nettest)
nettest$opt
plot(nettest$opt)
plot(nettest$opt,nettest$MSE)
par(mfrow=c(2,2))
plot(nettest$opt,main="first plot")
plot(nettest$MSE,main="second plot")
plot(nettest$totMSE,main="Third plot")
plot(nettest$opt,main="Third plot",ylab("Percentage of optimal networks"))
plot(nettest$opt,main="Third plot",ylab="Percentage of optimal networks")
plot(nettest$opt,main="Third plot",ylab="Percentage of optimal networks")
plot(nettest$opt,main="Optimal Networks",ylab="Percentage of optimal networks")
plot(nettest$opt,main="Optimal Networks",ylab="Probability")
plot(nettest$opt,main="Optimal Networks",ylab="Probability",xlab="Agents in First Layer")
plot(nettest$opt,main="Optimal Networks",ylab="Probability",xlab="Agents in First Layer")
plot(nettest$opt,main="Optimal Networks",ylab="Probability",xlab="Agents in First Layer",ylim=range(0:1))
plot(nettest$MSE,main="second plot")
plot(nettest$MSE,main="Average MSE",ylab="MSE",xlab="Agents in First Layer")
plot(nettest$MSE,main="Average MSE",ylab="MSE",xlab="Agents in First Layer")
plot(nettest$MSE,main="Average MSE When Not Optimal",ylab="MSE",xlab="Agents in First Layer")
nettest <- read.csv(file="C:/Users/Simon/Desktop/10inlayer2.csv",head = TRUE, sep=",")
nettest
nettest <- read.csv(file="C:/Users/Simon/Desktop/2inlayer2.csv",head = TRUE, sep=",")
nettest <- read.csv(file="C:/Users/Simon/Desktop/2inL2.csv",head = TRUE, sep=",")
nettest
par(mfrow=c(3,3))
plot(nettest$opt,main="Optimal Networks",ylab="Probability",xlab="Agents in First Layer",ylim=range(0:1))
plot(nettest$CovOpt,main="Optimal Networks",ylab="Probability",xlab="Agents in First Layer",ylim=range(0:1))
plot(nettest$covOpt,main="Optimal Networks",ylab="Probability",xlab="Agents in First Layer",ylim=range(0:1))
plot()
plot()
plot(nettest$covOpt,main="Optimal Networks",ylab="Probability",xlab="Agents in First Layer",ylim=range(0:1))
frame()
plot(nettest$covOpt,main="Optimal Networks",ylab="Probability",xlab="Agents in First Layer",ylim=range(0:1))
frame()
plot(nettest$covOpt,main="Optimal Networks",ylab="Probability",xlab="Agents in First Layer",ylim=range(0:1))
frame()
frame()
frame()
frame()
plot(nettest$covOpt,main="Optimal Networks",ylab="Probability",xlab="Agents in First Layer",ylim=range(0:1))
frame()
frame()
frame()
frame()
frame()
frame()
plot(nettest$covOpt,main="Optimal Networks",ylab="Probability",xlab="Agents in First Layer",ylim=range(0:1))
axis(1, at = 1:5,  labels=x.labels)
x <- seq(-20,20,by=.1)
y <- dnorm(x)
plot(x,y)
x <- seq(-10,10,by=.1)
y <- dnorm(x)
plot(x,y)
y <- dtdist(x)
x <- seq(-20,20,by=.1)
x <- seq(-20,20,by=.5)
y <- dt(x,df=10)
plot(x,y)
y <- dt(x,df=50)
plot(x,y)
x <- seq(-10,10,by=.5)
y <- dt(x,df=10)
plot(x,y)
x <- seq(-10,10,by=.1)
y <- dt(x,df=10)
plot(x,y)
y <- dt(x,df=100)
plot(x,y)
x <- seq(0,50,by=1)
y <- dbinom(x,50,.2)
plot(x,y)
y <- dbinom(x,50,.1)
y <- dbinom(x,50,.1)
plot(x,y)
x <- seq(0,50,by=.5)
y <- dbinom(x,50,.2)
y <- dbinom(x,100,.2)
x <- seq(0,50,by=1)
y <- dbinom(x,50,.2)
plot(x,y)
x <- seq(-20,20,by=.5)
y <- dchisq(x,df=10)
plot(x,y)
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/oneDimComparison.R')
setwd("C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project")
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/oneDimComparison.R')
install.packages("Hotelling")
library(Hotelling)
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/oneDimComparison.R')
help(rnorm)
ptm
df
save(df)
View(df)
save.image("C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/run1.RData")
View(df)
save(df, file="dfrun1.Rda")
g <- ggplot(data=df,aes(steps_mu,y=value,color=variable)) +
geom_line(aes(y = percent_mu_ks, col = "percent_mu_ks")) +
geom_line(aes(y = percent_mu_simp, col = "percent_mu_simp")) +
geom_line(aes(y = percent_mu_nn, col = "percent_mu_nn")) +
geom_line(aes( y = percent_mu_edist,col = "percent_mu_edist")) +
geom_line(aes( y = percent_mu_mmd,col = "percent_mu_mmd")) +
geom_line(aes( y = percent_mu_lmmd,col = "percent_mu_lmmd")) +
ggtitle("50 Samples From Each Distribution")
print(g)
g <- ggplot(data=df,aes(steps_mu,y=value,color=variable)) +
geom_line(aes(y = percent_mu_ks, col = "KS")) +
geom_line(aes(y = percent_mu_simp, col = "Simple Stat")) +
geom_line(aes(y = percent_mu_nn, col = "Near Neighbor")) +
geom_line(aes( y = percent_mu_edist,col = "Energy")) +
geom_line(aes( y = percent_mu_mmd,col = "Unbiased MMD")) +
geom_line(aes( y = percent_mu_lmmd,col = "Linear MMD")) +
ggtitle("50 Samples From Each Distribution") + labs(x="Distance Between Means",y="Percentage of Correct Rejections")
print(g)
percent_mu_lmmd
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
library(MASS)
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
k
k <- sample(2*m,2*m)
k
x1 <- Z[k,]
y1 <- Z[-k,]
Z
a
A
Z <- rbind( as.matrix(A), as.matrix(B))
Z
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
Z <- rbind( as.matrix(A), as.matrix(B))
Z
k <- sample(2*m,2*m)
x1 <- Z[k,]
y1 <- Z[-k,]
S[i] <- lMMD(x1,y1)
x1
m
k
k <- sample(2*m,m)
k
x1 <- Z[k,]
y1 <- Z[-k,]
x1
S <- lMMD(x1,y1)
S
df
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/oneDimComparison.R')
percent_mu_lmmd
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
p
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
S
So
S
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
SO
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
Z
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
A
B
Z <- rbind(A,B)
Z
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
k
x1
y1
Z
k <- sample(2*m,m)
x1 <- Z[k,]
y1 <- Z[-k,]
x1
y1
Z
lMMD(x1,y1)
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
A
B
alright <- lMMDDecision(A,B,99)
alright
size(Z)
dim(Z)
k
Z[k,]
Z[-k,]
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
m
k
k
k
k
k
sample(2*m,m)
sample(2*m,m)
sample(2*m,m)
sample(2*m,m)
sample(2*m,m)
sample(2*m,m)
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
k <- sample(2*m,m)
k <- sample(2*m,m)
k
k <- sample(2*m,m)
print(k)
k <- sample(2*m,m)
print(k)
k <- sample(2*m,m)
print(k)
k <- sample(2*m,m)
print(k)
k <- sample(2*m,m)
print(k)
k <- sample(2*m,m)
print(k)
k <- sample(2*m,m)
print(k)
help(sample)
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
help(print)
k
print(k)
print(k)
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
indexSample <- sample.int((2*m), size = m , replace = F);
indexSample <- sample.int((2*m), size = m , replace = F)
indexSample <- sample.int((2*m), size = m , replace = F)
print(indexSample)
indexSample <- sample.int((2*m), size = m , replace = F)
print(indexSample)
indexSample <- sample.int((2*m), size = m , replace = F)
print(indexSample)
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
for ( i in (1:R) ) {
#indices sample
indexSample <- sample.int((2*m), size = m , replace = F)
print(indexSample)
for ( i in (1:R) ) {
#indices sample
indexSample <- sample.int((2*m), size = m , replace = F)
print(indexSample) }
for ( i in (1:R) ) {
#indices sample
indexSample <- sample.int((2*m), size = m , replace = F)
print(indexSample) }
source('C:/Users/Simon/Desktop/StatComp/Statistical-Computing-Group-Project/mmdStats.R')
